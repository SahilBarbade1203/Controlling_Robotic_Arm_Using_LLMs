# -*- coding: utf-8 -*-
"""OOP_PYTHON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11-v_5J0oPri7r15-mzzHafoKdwPf3NA0
"""

class Rover :
  Geometry = {'length': 10, 'width': 5, 'height': 3}

  def __init__(self,swarm_id,rover_id,rover_location):
    self.Swarm_Id = swarm_id
    self.Rover_Id = rover_id
    self.Rover_Location = rover_location

  def rover_location(self):
    print(f"Rover ID: {self.Rover_Id}, Swarm ID: {self.Swarm_Id}, Location: {self.Rover_Location}")

  def recieve_message(self,swarm_id , rover_id, moving_dimension):
    if self.Swarm_Id == swarm_id and self.Rover_Id == rover_id:
      self.move_rover(moving_dimension)
      print(f"Message confirmed and acted upon by Rover {self.Rover_Id} in Swarm {self.Swarm_Id}")
    else:
      print(f"Rover {self.Rover_Id} in Swarm {self.Swarm_Id} couldn't confirm the message")

  def move_rover(self,moving_dim):
    #Assuming moving_dim provider is tupple i.e (mov_x,mov_y,mov_z)
    new_location = (
        self.Rover_Location[0] + moving_dim[0],
        self.Rover_Location[1] + moving_dim[1],
        self.Rover_Location[2] + moving_dim[2]
    )
    self.Rover_Location = new_location
    print(f"Rover {self.Rover_Id} in Swarm {self.Swarm_Id} moved to {self.Rover_Location}")

  #Added new functionality to simulate a sensor that detects obstacles within a certain radius of the rover's current location
  def detect_obstacles(self, obstacle_location, radius):
      obstacle_x, obstacle_y, obstacle_z = obstacle_location
      distance = ((self.Rover_Location[0] - obstacle_x) ** 2 +
                    (self.Rover_Location[1] - obstacle_y) ** 2 +
                    (self.Rover_Location[2] - obstacle_z) ** 2) ** 0.5
      if distance <= radius:
          print(f"Obstacle detected at {obstacle_location} within {radius} units of Rover {self.Rover_Id} in Swarm {self.Swarm_Id}")
      else:
          print(f"No obstacles detected within {radius} units of Rover {self.Rover_Id} in Swarm {self.Swarm_Id}")

rover1 = Rover("Swarm1", "Rover1", (30, 40, 50))
rover2 = Rover("Swarm2", "Rover2", (10, 20, 30))

message_for_rover1 = ("Swarm1", "Rover1", (5, 5, 5))
rover1.recieve_message(*message_for_rover1)

message_for_rover2 = ("Swarm2", "Rover2", (3, 3, 3))
rover2.recieve_message(*message_for_rover2)

rover1 = Rover("Swarm1", "Rover1", (30, 40, 50))

obstacle_location = (35, 45, 55)
radius = 10
rover1.detect_obstacles(obstacle_location, radius)

class Daughter_Rover(Rover):
  def __init__(self,swarm_id,rover_id,rover_location):
    super().__init__(swarm_id,rover_id,rover_location)
    self.Geometry = {
            'length': Rover.Geometry['length'] / 2,
            'width': Rover.Geometry['width'] / 2,
            'height': Rover.Geometry['height'] / 2
        }
  def move_rover(self,moving_dim):
    half_dim = (moving_dim[0]/2, moving_dim[1]/2, moving_dim[2]/2)
    new_location = (
        self.Rover_Location[0] + half_dim[0],
        self.Rover_Location[1] + half_dim[1],
        self.Rover_Location[2] + half_dim[2]
    )
    self.Rover_Location = new_location
    print(f"Daughter_Rover {self.Rover_Id} in Swarm {self.Swarm_Id} moved to {self.Rover_Location}")

daughter_rover = Daughter_Rover("Swarm3", "DaughterRover1", (15, 25, 35))

message_for_daughter_rover = ("Swarm3", "DaughterRover1", (8, 8, 8))
daughter_rover.recieve_message(*message_for_daughter_rover)

class User :
  def __init__(self,user_id):
    self.User_Id = user_id
    self.rovers_used = []

  def User_Id(self):
    print(f"User ID: {self.User_Id}")

  def add_rover(self, rover):
        self.rovers_used.append((rover.Swarm_Id, rover.Rover_Id))
        print(f"Rover {rover.Rover_Id} in Swarm {rover.Swarm_Id} added to user {self.User_Id}")

  def remove_rover(self, rover):
      if (rover.Swarm_Id, rover.Rover_Id) in self.rovers_used:
          self.rovers_used.remove((rover.Swarm_Id, rover.Rover_Id))
          print(f"Rover {rover.Rover_Id} in Swarm {rover.Swarm_Id} removed from user {self.User_Id}")
      else:
          print(f"Rover {rover.Rover_Id} in Swarm {rover.Swarm_Id} not found in user {self.User_Id}'s list")

class Scientist(User):
    def view_rover(self, rover):
        print(f"Scientist {self.User_Id} viewing Rover {rover.Rover_Id} in Swarm {rover.Swarm_Id} location: {rover.Rover_Location}")

    # Overriding add_rover and remove_rover to deny access
    def add_rover(self, rover):
        print("Scientists are not allowed to add rovers.")

    def remove_rover(self, rover):
        print("Scientists are not allowed to remove rovers.")

class Operator(User):
  #message format : ("Swarm3", "DaughterRover5", (8, 8, 8))
    def move_rover(self, rover, message):
        rover.recieve_message(*message)

    # Overriding add_rover and remove_rover to deny access
    def add_rover(self, rover):
        print("Operators are not allowed to add rovers.")

    def remove_rover(self, rover):
        print("Operators are not allowed to remove rovers.")

    def view_rover(self, rover):
        print("Operators are not allowed to view rover location.")


class Manager(User):
    def add_rover(self, rover):
        self.rovers_used.append((rover.Swarm_Id, rover.Rover_Id))
        print(f"Manager {self.User_Id} added Rover {rover.Rover_Id} in Swarm {rover.Swarm_Id}")

    def remove_rover(self, rover):
        if (rover.Swarm_Id, rover.Rover_Id) in self.rovers_used:
            self.rovers_used.remove((rover.swarm_id, rover.rover_id))
            print(f"Manager {self.User_Id} removed Rover {rover.Rover_Id} in Swarm {rover.Swarm_Id}")
        else:
            print(f"Rover {rover.Rover_Id} in Swarm {rover.Swarm_Id} not found in Manager {self.User_Id}'s list")

    # Override view_rover_location and move_rover to deny access
    def view_rover(self, rover):
        print("Managers are not allowed to view rover location.")

    def move_rover(self, rover, message):
        print("Managers are not allowed to move rovers.")

rover1 = Rover("Swarm1", "Rover1", (30, 40, 50))
rover2 = Rover("Swarm2", "Rover2", (10, 20, 30))

scientist = Scientist("SCI001")
operator = Operator("OPR001")
manager = Manager("MGR001")

scientist.add_rover(rover1)
operator.add_rover(rover2)

scientist.view_rover(rover1)
operator.move_rover(rover2, ("Swarm2", "Rover2", (5, 5, 5)))
